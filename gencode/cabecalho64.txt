

#include <stdio.h>

#include <process.h>

#include "math.h"



#define h       1.0 * pow(10, -6)

#define C1      10.0 * pow(10, -9)

#define C2      100.0 * pow(10, -9)

#define L       19.0 * pow(10, -3)

#define R       1800.0

#define m0     -0.37 * pow(10, -3)

#define m1     -0.68 * pow(10, -3)

#define Bp      1.1

#define eq1     1.0 / (10.0 * pow(10, -9))

#define eq2     1.0 / (100.0 * pow(10, -9))

#define eq3    -1.0 / (19.0 * pow(10, -3))

#define yo     -0.2

#define zo      0.0



 double K1 = zo;

 double K2 = zo;

 double K3 = zo;

 double K4 = zo;

 double L1 = zo;

 double L2 = zo;

 double L3 = zo;

 double L4 = zo;

 double M1 = zo;

 double M2 = zo;

 double M3 = zo;

 double M4 = zo;



double xd     = zo;

double yd     = zo;

double zd     = zo;

double id     = zo;

double xeqabs = zo;

double xeq    = zo;



double x = zo;

double y = yo;

double z = zo;





double x2 = zo;

double y2 = yo;

double z2 = zo;

//int A[90000];



FILE* stream1;

void ccs(double x0,const int loop, const char namepath[])
{

fopen_s(&stream1, namepath, "w");
if (stream1 == 0) {
	printf("deuruimglr");
}
else { ; }

  x  = x0;

 x2 = x0;

 for (int i = 0; i < loop; i++) {





		xeqabs = fabs((x - x2) / 2);

		xeq = log(xeqabs);



 xeq =fabs( xeq * pow(10,8));

fprintf(stream1, "%lld \n",  ((long long int)xeq)%256) ;




		K1 = 0;

		K2 = 0;

		K3 = 0;

		K4 = 0;

		L1 = 0;

		L2 = 0;

		L3 = 0;

		L4 = 0;

		M1 = 0;

		M2 = 0;

		M3 = 0;

		M4 = 0;



		xd = 0;

		yd = 0;

		zd = 0;







		if (x > Bp) {

			id = (m0 * x + Bp * (m1 - m0));

		}

		else if (x < -Bp) {

			id = (m0 * x + Bp * (m0 - m1));

		}

		else {

			id = (m1 * x);

		}





		K1 = eq1 * ((y - x) / R - id);

		L1 = eq2 * ((x - y) / R + z);

		M1 = eq3 * y;





		xd = x + h * (0.5) * K1;

		yd = y + h * (0.5) * L1;

		zd = z + (0.5) * h * M1;







		if (xd > Bp) {

			id = m0 * xd + Bp * (m1 - m0);

		}

		else if (xd < (-Bp)) {

			id = m0 * xd + Bp * (m0 - m1);

		}

		else {

			id = m1 * xd;

		}



		K2 = eq1 * ((yd - xd) / R - id);

		L2 = eq2 * ((xd - yd) / R + zd);

		M2 = eq3 * yd;





		xd = x + h * (0.5) * K2;

		yd = y + h * (0.5) * L2;

		zd = z + (0.5) * h * M2;



		if (xd > Bp) {

			id = m0 * xd + Bp * (m1 - m0);

		}

		else if (xd < (-Bp)) {

			id = m0 * xd + Bp * (m0 - m1);

		}

		else {

			id = m1 * xd;

		}

		K3 = eq1 * ((yd - xd) / R - id);

		L3 = eq2 * ((xd - yd) / R + zd);

		M3 = eq3 * yd;





		xd = x + h * K3;

		yd = y + h * L3;

		zd = z + h * M3;







		if (xd > Bp) {

			id = m0 * xd + Bp * (m1 - m0);

		}

		else if (xd < (-Bp)) {

			id = m0 * xd + Bp * (m0 - m1);

		}

		else {

			id = m1 * xd;

		}



		K4 = eq1 * ((yd - xd) / R - id);

		L4 = eq2 * ((xd - yd) / R + zd);

		M4 = eq3 * yd;











		x = x + h * (1.0 / 6.0) * (K1 + (2.0) * K2 + (2.0) * K3 + K4);

		y = y + h * (1.0 / 6.0) * (L1 + (2.0) * L2 + (2.0) * L3 + L4);

		z = z + h * (1.0 / 6.0) * (M1 + (2.0) * M2 + (2.0) * M3 + M4);

		



		K1 = 0;

		K2 = 0;

		K3 = 0;

		K4 = 0;

		L1 = 0;

		L2 = 0;

		L3 = 0;

		L4 = 0;

		M1 = 0;

		M2 = 0;

		M3 = 0;

		M4 = 0;



		xd = 0;

		yd = 0;

		zd = 0;





		if (x2 > Bp) {

			id = (m0 * x2 + Bp * (m1 - m0));

		}

		else if (x2 < -Bp) {

			id = (m0 * x2 + Bp * (m0 - m1));

		}

		else {

			id = (m1 * x2);

		}





		K1 = eq1 * (y2 / R - x2 / R - id);

		L1 = eq2 * ((x2 - y2) / R + z2);

		M1 = eq3 * y2;





		xd = x2 + h * (0.5) * K1;

		yd = y2 + h * (0.5) * L1;

		zd = z2 + (0.5) * h * M1;







		if (xd > Bp) {

			id = m0 * xd + Bp * (m1 - m0);

		}

		else if (xd < (-Bp)) {

			id = m0 * xd + Bp * (m0 - m1);

		}

		else {

			id = m1 * xd;

		}



		K2 = eq1 * (yd / R - xd / R - id);

		L2 = eq2 * ((xd - yd) / R + zd);

		M2 = eq3 * yd;



		xd = x2 + h * (0.5) * K2;

		yd = y2 + h * (0.5) * L2;

		zd = z2 + (0.5) * h * M2;



		if (xd > Bp) {

			id = m0 * xd + Bp * (m1 - m0);

		}

		else if (xd < (-Bp)) {

			id = m0 * xd + Bp * (m0 - m1);

		}

		else {

			id = m1 * xd;

		}

		K3 = eq1 * (yd / R - xd / R - id);

		L3 = eq2 * ((xd - yd) / R + zd);

		M3 = eq3 * yd;







		xd = x2 + h * K3;

		yd = y2 + h * L3;

		zd = z2 + h * M3;







		if (xd > Bp) {

			id = m0 * xd + Bp * (m1 - m0);

		}

		else if (xd < (-Bp)) {

			id = m0 * xd + Bp * (m0 - m1);

		}

		else {

			id = m1 * xd;

		}



		K4 = eq1 * (yd / R - xd / R - id);

		L4 = eq2 * ((xd - yd) / R + zd);

		M4 = eq3 * yd;











		x2 = x2 + h * (1.0 / 6.0) * (K1 + (2.0) * K2 + (2.0) * K3 + K4);

		y2 = y2 + h * (1.0 / 6.0) * (L1 + (2.0) * L2 + (2.0) * L3 + L4);

		z2 = z2 + h * (1.0 / 6.0) * (M1 + (2.0) * M2 + (2.0) * M3 + M4);

}
 fclose(stream1);
     y =yo;

	z = zo;

	y2 = yo;

	z2 = zo;

}

